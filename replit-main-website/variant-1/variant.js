console.log('Improving CardCarousel badge visibility and reducing card size');

// Target all badge elements in the CardCarousel section
function improveBadgeVisibility() {
  const badges = document.querySelectorAll('.CardCarousel .keen-slider__slide .absolute.top-0.right-0');
  
  if (badges.length === 0) {
    console.log('Badges not found yet, waiting...');
    return false;
  }
  
  console.log(`Found ${badges.length} badges to improve`);
  
  badges.forEach(badge => {
    // Apply high-contrast styling directly to style property
    badge.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
    badge.style.backdropFilter = 'blur(4px)';
    badge.style.border = '1px solid rgba(255, 255, 255, 0.2)';
    
    // Ensure text is white and bold for better readability
    const text = badge.querySelector('p');
    if (text) {
      text.style.fontWeight = '600';
      text.style.color = '#ffffff';
    }
  });
  
  return true;
}

// Reduce carousel card sizes
function reduceCardSize() {
  const cards = document.querySelectorAll('.CardCarousel .keen-slider__slide');
  
  if (cards.length === 0) {
    console.log('Cards not found yet, waiting...');
    return false;
  }
  
  console.log(`Found ${cards.length} cards to resize`);
  
  cards.forEach(card => {
    // Reduce overall card size
    card.style.maxWidth = '400px';
    card.style.transform = 'scale(0.85)';
    card.style.transformOrigin = 'center';
    
    // Reduce image height
    const imgContainer = card.querySelector('.overflow-hidden');
    if (imgContainer) {
      imgContainer.style.maxHeight = '200px';
    }
    
    // Reduce padding in content area
    const contentArea = card.querySelector('.pb-6, .p-6');
    if (contentArea) {
      contentArea.style.padding = '16px';
    }
    
    // Reduce heading font size
    const heading = card.querySelector('h3');
    if (heading) {
      heading.style.fontSize = '18px';
      heading.style.lineHeight = '24px';
    }
    
    // Reduce paragraph font size
    const paragraph = card.querySelector('p.font-sans.text-sans-17');
    if (paragraph) {
      paragraph.style.fontSize = '14px';
      paragraph.style.lineHeight = '20px';
    }
  });
  
  return true;
}

// Run both improvements
function applyAllImprovements() {
  const badgesReady = improveBadgeVisibility();
  const cardsReady = reduceCardSize();
  
  return badgesReady && cardsReady;
}

// Run immediately for static content
if (applyAllImprovements()) {
  window.CFQ = window.CFQ || [];
  window.CFQ.push({ emit: 'variantRendered' });
} else {
  // Use MutationObserver for dynamic content
  const observer = new MutationObserver(() => {
    if (applyAllImprovements()) {
      observer.disconnect();
      window.CFQ = window.CFQ || [];
      window.CFQ.push({ emit: 'variantRendered' });
    }
  });
  
  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
  
  // Timeout after 10 seconds
  setTimeout(() => {
    observer.disconnect();
    console.error('Timeout: Elements not found');
  }, 10000);
}


//Production Code
/*! Code generated by Coframe AI Editor */
(()=>{var l=Symbol.for("JSX.Fragment");function a(){let n=document.querySelectorAll(".CardCarousel .keen-slider__slide .absolute.top-0.right-0");return n.length===0?!1:(`${n.length}`,n.forEach(e=>{e.style.backgroundColor="rgba(0, 0, 0, 0.8)",e.style.backdropFilter="blur(4px)",e.style.border="1px solid rgba(255, 255, 255, 0.2)";let t=e.querySelector("p");t&&(t.style.fontWeight="600",t.style.color="#ffffff")}),!0)}function c(){let n=document.querySelectorAll(".CardCarousel .keen-slider__slide");return n.length===0?!1:(`${n.length}`,n.forEach(e=>{e.style.maxWidth="400px",e.style.transform="scale(0.85)",e.style.transformOrigin="center";let t=e.querySelector(".overflow-hidden");t&&(t.style.maxHeight="200px");let r=e.querySelector(".pb-6, .p-6");r&&(r.style.padding="16px");let s=e.querySelector("h3");s&&(s.style.fontSize="18px",s.style.lineHeight="24px");let o=e.querySelector("p.font-sans.text-sans-17");o&&(o.style.fontSize="14px",o.style.lineHeight="20px")}),!0)}function i(){let n=a(),e=c();return n&&e}if(i())window.CFQ=window.CFQ||[],window.CFQ.push({emit:"variantRendered"});else{let n=new MutationObserver(()=>{i()&&(n.disconnect(),window.CFQ=window.CFQ||[],window.CFQ.push({emit:"variantRendered"}))});n.observe(document.body,{childList:!0,subtree:!0}),setTimeout(()=>{n.disconnect(),console.error("Timeout: Elements not found")},1e4)}})();
